{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{Screen,screensEnabled,shouldUseActivityState}from'react-native-screens';var FAR_FAR_AWAY=30000;export default function ResourceSavingScene(_ref){var isVisible=_ref.isVisible,children=_ref.children,style=_ref.style,rest=_objectWithoutProperties(_ref,[\"isVisible\",\"children\",\"style\"]);if(screensEnabled!==null&&screensEnabled!==void 0&&screensEnabled()&&Platform.OS!=='web'){if(shouldUseActivityState){return React.createElement(Screen,_extends({activityState:isVisible?2:0,style:style},rest),children);}else{return React.createElement(Screen,_extends({active:isVisible?1:0,style:style},rest),children);}}return React.createElement(View,_extends({hidden:!isVisible,style:[styles.container,Platform.OS==='web'?{display:isVisible?'flex':'none'}:{overflow:'hidden'},style],collapsable:false,removeClippedSubviews:Platform.OS==='ios'?!isVisible:true,pointerEvents:isVisible?'auto':'none'},rest),React.createElement(View,{style:Platform.OS==='web'?null:isVisible?styles.attached:styles.detached},children));}var styles=StyleSheet.create({container:{flex:1},attached:{flex:1},detached:{flex:1,top:FAR_FAR_AWAY}});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","rest","screensEnabled","Platform","isVisible","style","styles","display","overflow","detached","container","flex","attached","top"],"mappings":"4WAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,mLAEA,OAAA,MAAA,CAAA,cAAA,CAAA,sBAAA,KAAA,sBAAA,CAcA,GAAMA,CAAAA,YAAY,CAAlB,KAAA,CAEA,cAAe,SAAA,CAAA,mBAAA,MAKL,IALkC,CAAA,SAKlC,MALkC,SAKlC,CALkC,QAKlC,MALkC,QAKlC,CALkC,KAKlC,MALkC,KAKlC,CADLC,IACK,iEAER,GAAIC,cAAc,GAAdA,IAAAA,EAAAA,cAAc,GAAA,IAAdA,EAAAA,EAAAA,cAAc,EAAdA,EAAsBC,QAAQ,CAARA,EAAAA,GAA1B,KAAA,CAAiD,CAC/C,GAAA,sBAAA,CAA4B,CAC1B,MAEE,CAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAQ,aAAa,CAAEC,SAAS,CAAA,CAAA,CAAhC,CAAA,CAA0C,KAAK,CAAEC,KAAjD,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAFF,CADF,CAAA,IAOO,CACL,MAEE,CAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAQ,MAAM,CAAED,SAAS,CAAA,CAAA,CAAzB,CAAA,CAAmC,KAAK,CAAEC,KAA1C,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAFF,CAMD,CACF,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAEE,MAAM,CAAE,CAFV,SAAA,CAGE,KAAK,CAAE,CACLC,MAAM,CADD,SAAA,CAEL,QAAQ,CAAR,EAAA,GAAA,KAAA,CACI,CAAEC,OAAO,CAAEH,SAAS,CAAA,MAAA,CAAY,MAAhC,CADJ,CAEI,CAAEI,QAAQ,CAAE,QAAZ,CAJC,CAHT,KAGS,CAHT,CAUE,WAAW,CAVb,KAAA,CAWE,qBAAqB,CAGnBL,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAwB,CAAxBA,SAAAA,CAdJ,IAAA,CAgBE,aAAa,CAAEC,SAAS,CAAA,MAAA,CAAY,MAhBtC,CAAA,CAAA,IAAA,CAAA,CAmBE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CACHD,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAEIC,SAAS,CACTE,MAAM,CADG,QAAA,CAETA,MAAM,CAACG,QANf,CAAA,CApBJ,QAoBI,CAnBF,CADF,CAiCD,CAED,GAAMH,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BI,SAAS,CAAE,CACTC,IAAI,CAAE,CADG,CADoB,CAI/BC,QAAQ,CAAE,CACRD,IAAI,CAAE,CADE,CAJqB,CAO/BF,QAAQ,CAAE,CACRE,IAAI,CADI,CAAA,CAERE,GAAG,CAAEb,YAFG,CAPqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  return (\n    <View\n      // @ts-expect-error: hidden exists on web, but not in React Native\n      hidden={!isVisible}\n      style={[\n        styles.container,\n        Platform.OS === 'web'\n          ? { display: isVisible ? 'flex' : 'none' }\n          : { overflow: 'hidden' },\n        style,\n      ]}\n      collapsable={false}\n      removeClippedSubviews={\n        // On iOS, set removeClippedSubviews to true only when not focused\n        // This is an workaround for a bug where the clipped view never re-appears\n        Platform.OS === 'ios' ? !isVisible : true\n      }\n      pointerEvents={isVisible ? 'auto' : 'none'}\n      {...rest}\n    >\n      <View\n        style={\n          Platform.OS === 'web'\n            ? null\n            : isVisible\n            ? styles.attached\n            : styles.detached\n        }\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}